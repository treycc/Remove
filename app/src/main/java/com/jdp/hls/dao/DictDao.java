package com.jdp.hls.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jdp.hls.greendaobean.TDict;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICT".
*/
public class DictDao extends AbstractDao<TDict, Long> {

    public static final String TABLENAME = "DICT";

    /**
     * Properties of entity TDict.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property RowNum = new Property(1, int.class, "RowNum", false, "ROW_NUM");
        public final static Property ConfigType = new Property(2, int.class, "ConfigType", false, "CONFIG_TYPE");
        public final static Property TypeId = new Property(3, int.class, "TypeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(4, String.class, "TypeName", false, "TYPE_NAME");
        public final static Property ConfigTypeDesc = new Property(5, String.class, "ConfigTypeDesc", false, "CONFIG_TYPE_DESC");
    }


    public DictDao(DaoConfig config) {
        super(config);
    }
    
    public DictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ROW_NUM\" INTEGER NOT NULL ," + // 1: RowNum
                "\"CONFIG_TYPE\" INTEGER NOT NULL ," + // 2: ConfigType
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 3: TypeId
                "\"TYPE_NAME\" TEXT," + // 4: TypeName
                "\"CONFIG_TYPE_DESC\" TEXT);"); // 5: ConfigTypeDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TDict entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRowNum());
        stmt.bindLong(3, entity.getConfigType());
        stmt.bindLong(4, entity.getTypeId());
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(5, TypeName);
        }
 
        String ConfigTypeDesc = entity.getConfigTypeDesc();
        if (ConfigTypeDesc != null) {
            stmt.bindString(6, ConfigTypeDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TDict entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRowNum());
        stmt.bindLong(3, entity.getConfigType());
        stmt.bindLong(4, entity.getTypeId());
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(5, TypeName);
        }
 
        String ConfigTypeDesc = entity.getConfigTypeDesc();
        if (ConfigTypeDesc != null) {
            stmt.bindString(6, ConfigTypeDesc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TDict readEntity(Cursor cursor, int offset) {
        TDict entity = new TDict( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // RowNum
            cursor.getInt(offset + 2), // ConfigType
            cursor.getInt(offset + 3), // TypeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TypeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ConfigTypeDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TDict entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRowNum(cursor.getInt(offset + 1));
        entity.setConfigType(cursor.getInt(offset + 2));
        entity.setTypeId(cursor.getInt(offset + 3));
        entity.setTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConfigTypeDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TDict entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TDict entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TDict entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
