package com.jdp.hls.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jdp.hls.greendaobean.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Long> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RegionId = new Property(0, Long.class, "RegionId", true, "_id");
        public final static Property RegionName = new Property(1, String.class, "RegionName", false, "REGION_NAME");
        public final static Property ParentId = new Property(2, int.class, "ParentId", false, "PARENT_ID");
        public final static Property Level = new Property(3, int.class, "Level", false, "LEVEL");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: RegionId
                "\"REGION_NAME\" TEXT," + // 1: RegionName
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 2: ParentId
                "\"LEVEL\" INTEGER NOT NULL );"); // 3: Level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long RegionId = entity.getRegionId();
        if (RegionId != null) {
            stmt.bindLong(1, RegionId);
        }
 
        String RegionName = entity.getRegionName();
        if (RegionName != null) {
            stmt.bindString(2, RegionName);
        }
        stmt.bindLong(3, entity.getParentId());
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long RegionId = entity.getRegionId();
        if (RegionId != null) {
            stmt.bindLong(1, RegionId);
        }
 
        String RegionName = entity.getRegionName();
        if (RegionName != null) {
            stmt.bindString(2, RegionName);
        }
        stmt.bindLong(3, entity.getParentId());
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // RegionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RegionName
            cursor.getInt(offset + 2), // ParentId
            cursor.getInt(offset + 3) // Level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setRegionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.getInt(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Area entity, long rowId) {
        entity.setRegionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Area entity) {
        if(entity != null) {
            return entity.getRegionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Area entity) {
        return entity.getRegionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
